services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: medicine_vending_db_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-medicine_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-medicine_password}
      POSTGRES_DB: ${POSTGRES_DB:-medicine_vending_db}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - medicine_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-medicine_user} -d ${POSTGRES_DB:-medicine_vending_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medicine_vending_backend_prod
    env_file:
      - .env.prod
    environment:
      DATABASE_URL: ${DATABASE_URL}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG:-False}
      HOST: ${HOST:-0.0.0.0}
      PORT: ${PORT:-8000}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      PUBMED_API_KEY: ${PUBMED_API_KEY}
      WIKIPEDIA_API_BASE_URL: ${WIKIPEDIA_API_BASE_URL}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - medicine_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Production build with Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: medicine_vending_frontend_prod
    depends_on:
      - backend
    networks:
      - medicine_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: medicine_vending_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - medicine_network
    restart: unless-stopped

volumes:
  postgres_data_prod:
  nginx_logs:

networks:
  medicine_network:
    driver: bridge
